#include<bits/stdc++.h>
using namespace std;

class todoItem{
private:
    int id;
    string description;
    bool completed;
public:
    todoItem() : id(0),description(""),completed(false){}
    ~todoItem() = default;

    bool create(string new_Description)
    {
        id = rand() %100+1;
        description = new_Description;
        return true;
    }
    int getId() {return id; }
    string getDescriprtion() {return description; }
    bool isCompleted() {return completed; }

    void setCompleted(bool val){ completed = val; }
    


};
int main()
{
    char input_option;
    int input_id;
    string input_decription;
    list<todoItem>todoItems;
    list<todoItem>::iterator it;
    srand(time(NULL));

    todoItems.clear();

    // todoItem test;
    // test.create("This is a test");
    // todoItems.push_back(test);
   

    while(1)
    {
        system("cls");
        cout<<"TO-DO List"<<endl;
        cout<<endl;
        for(it=todoItems.begin();it!=todoItems.end();it++)
        {

            string completed = it->isCompleted() ? "done" : "notdone";

            cout<<it->getId() << " | " << it->getDescriprtion() << " | "
            << completed <<endl;
        }

        

        cout<<"[a]dd a new ToDo"<<endl;
        cout<<"[c]omplete  ToDo"<<endl;
        cout<<"[q]uit"<<endl;

        cout<<"choice"<<endl;

        cin>>input_option;

        if(input_option == 'q')
        {
            cout<<"See you AGAIN!!"<<endl;
            break;
        }

        else if(input_option == 'a'){
            cout<<"Add a new description:"<<endl;
            cin.clear();
            cin.ignore();
            getline(cin, input_decription);

            todoItem newItem;
            newItem.create(input_decription);
            todoItems.push_back(newItem);


        }
        else if (input_option == 'c'){
            cout<<"Enter id to mark completed"<<endl;
            cin>>input_id;
            for(it=todoItems.begin();it!=todoItems.end();it++)
            {
                if(input_id == it->getId())
                {
                    it->setCompleted(true);
                    break;
                }
            }

        }
        
    }
    return 0;
}
